								连接查询
一、什么是连接查询？
  在实际开发中大多数情况下，都不是从单表中查询数据，一般都是多张表联合查询取出最终结果
实际开发中一般一个业务都会有多张表，设置一张表可能数据大量重复，导致数据冗余，浪费内存空间。（现在的数据库都叫关系型数据库）

二、连接查询的分类
  1、根据语法出现的年代：SQL92（很少见了，一些老的DBA可能还在使用这种语法。DBA:DataBase Administrator,数据库管理员。）
SQL99（较新的使用较多的）
  2、根据表的连接方式来分：内连接：等值连接（靠等量关系连接）、非等值连接（如区间）、自联结（一张表看出两张表）
			    外连接：左外连接、右外连接（也可以直接叫左右连接）
			    全连接（不学，很少用）

三、在表的连接查询方面有一种现象叫做笛卡尔积现象（笛卡尔乘积现象）（没什么用的内容,92的语法）
案例：找出每一个员工的部门名称，要求显示员工名和部门名
EMP表：
+--------+--------+
| ename  | deptno |
+--------+--------+
| SMITH  |     20 |
| ALLEN  |     30 |
| WARD   |     30 |
| JONES  |     20 |
| MARTIN |     30 |
| BLAKE  |     30 |
| CLARK  |     10 |
| SCOTT  |     20 |
| KING   |     10 |
| TURNER |     30 |
| ADAMS  |     20 |
| JAMES  |     30 |
| FORD   |     20 |
| MILLER |     10 |
+--------+--------+
DEPT表：
+--------+------------+----------+
| DEPTNO | DNAME      | LOC      |
+--------+------------+----------+
|     10 | ACCOUNTING | NEW YORK |
|     20 | RESEARCH   | DALLAS   |
|     30 | SALES      | CHICAGO  |
|     40 | OPERATIONS | BOSTON   |
+--------+------------+----------+

select ename,dname from emp,dept;
这段命令执行56条记录，相乘了这堆东西，两张表的查询如果不加条件限制的话，最终结果是这两张表所有数据的乘积


关于表的别名：
  select e.ename,d.dname from emp e,dept d;
  表的别名有什么好处：1、执行效率高2、可读性好（避免两表中数据重名）（建议以后连接查询都取别名）

怎么避免笛卡尔积现象？加条件进行过滤
  思考：避免了笛卡尔积现象会减少记录的匹配次数吗？ 不会，次数还是56次，只不过是显示有效的记录
案例：找出每一个员工的部门名称，要求显示员工名和部门名
  select e.ename,d.dname from emp e,dept d where e.deptno = d.deptno;
  
mysql> select e.ename,d.dname from emp e,dept d where e.deptno = d.deptno;
	+--------+------------+
	| ename  | dname      |
	+--------+------------+
	| CLARK  | ACCOUNTING |
	| KING   | ACCOUNTING |
	| MILLER | ACCOUNTING |
	| SMITH  | RESEARCH   |
	| JONES  | RESEARCH   |
	| SCOTT  | RESEARCH   |
	| ADAMS  | RESEARCH   |
	| FORD   | RESEARCH   |
	| ALLEN  | SALES      |
	| WARD   | SALES      |
	| MARTIN | SALES      |
	| BLAKE  | SALES      |
	| TURNER | SALES      |
	| JAMES  | SALES      |
	+--------+------------+

四、内连接中的等值连接
最大的特点：条件是等量关系
案例：找出每一个员工的部门名称，要求显示员工名和部门名
  语法格式：
  ...
    A
  join
    B
  on
    连接条件
SQL99语法结构更清晰，表的连接条件和后来的where条件分离了。

  select e.ename,d.dname from emp e (inner)join dept d on e.deptno = d.deptno;（=连接，所以叫等值连接,inner可以省略，带着inner是为了可读性好，让人知道是内连接）

mysql> select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno;
+--------+------------+
| ename  | dname      |
+--------+------------+
| CLARK  | ACCOUNTING |
| KING   | ACCOUNTING |
| MILLER | ACCOUNTING |
| SMITH  | RESEARCH   |
| JONES  | RESEARCH   |
| SCOTT  | RESEARCH   |
| ADAMS  | RESEARCH   |
| FORD   | RESEARCH   |
| ALLEN  | SALES      |
| WARD   | SALES      |
| MARTIN | SALES      |
| BLAKE  | SALES      |
| TURNER | SALES      |
| JAMES  | SALES      |
+--------+------------+

五、内连接的非等值连接
最大的特点是连接条件中的关系是非等量关系
案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级。
mysql> select ename,sal from emp;    e表
+--------+---------+
| ename  | sal     |
+--------+---------+
| SMITH  |  800.00 |
| ALLEN  | 1600.00 |
| WARD   | 1250.00 |
| JONES  | 2975.00 |
| MARTIN | 1250.00 |
| BLAKE  | 2850.00 |
| CLARK  | 2450.00 |
| SCOTT  | 3000.00 |
| KING   | 5000.00 |
| TURNER | 1500.00 |
| ADAMS  | 1100.00 |
| JAMES  |  950.00 |
| FORD   | 3000.00 |
| MILLER | 1300.00 |
+--------+---------+
mysql> select * from salgrade;      s表
+-------+-------+-------+
| GRADE | LOSAL | HISAL |
+-------+-------+-------+
|     1 |   700 |  1200 |
|     2 |  1201 |  1400 |
|     3 |  1401 |  2000 |
|     4 |  2001 |  3000 |
|     5 |  3001 |  9999 |
+-------+-------+-------+
这两张表的连接不能靠等量关系

  select 
    e.ename,e.sal,s.grade 
  from 
    emp e
  join
    salgrade s
  on
    e.sal between s.losal and s.hisal;

+--------+---------+-------+
| ename  | sal     | grade |
+--------+---------+-------+
| SMITH  |  800.00 |     1 |
| ALLEN  | 1600.00 |     3 |
| WARD   | 1250.00 |     2 |
| JONES  | 2975.00 |     4 |
| MARTIN | 1250.00 |     2 |
| BLAKE  | 2850.00 |     4 |
| CLARK  | 2450.00 |     4 |
| SCOTT  | 3000.00 |     4 |
| KING   | 5000.00 |     5 |
| TURNER | 1500.00 |     3 |
| ADAMS  | 1100.00 |     1 |
| JAMES  |  950.00 |     1 |
| FORD   | 3000.00 |     4 |
| MILLER | 1300.00 |     2 |
+--------+---------+-------+


六、内连接中的自连接：
最大特点：一张表看作两张表，自己连自己

案例：找出每个员工的上级领导，要求显示员工名和对应的领导名
mysql> select empno,ename,mgr from emp;
+-------+--------+------+
| empno | ename  | mgr  |   emp a 员工表
+-------+--------+------+
|  7369 | SMITH  | 7902 |	想要mgr列中显示的不是上级编号，而是上级的名字
|  7499 | ALLEN  | 7698 |
|  7521 | WARD   | 7698 |
|  7566 | JONES  | 7839 |
|  7654 | MARTIN | 7698 |
|  7698 | BLAKE  | 7839 |
|  7782 | CLARK  | 7839 |
|  7788 | SCOTT  | 7566 |
|  7839 | KING   | NULL |
|  7844 | TURNER | 7698 |
|  7876 | ADAMS  | 7788 |
|  7900 | JAMES  | 7698 |
|  7902 | FORD   | 7566 |
|  7934 | MILLER | 7782 |
+-------+--------+------+
也把这张表看作是emp b领导表
+-------+--------+------+
| empno | ename  | mgr  |
+-------+--------+------+
|  7369 | SMITH  | 7902 |
|  7499 | ALLEN  | 7698 |
|  7521 | WARD   | 7698 |
|  7566 | JONES  | 7839 |
|  7654 | MARTIN | 7698 |
|  7698 | BLAKE  | 7839 |
|  7782 | CLARK  | 7839 |
|  7788 | SCOTT  | 7566 |
|  7839 | KING   | NULL |
|  7844 | TURNER | 7698 |
|  7876 | ADAMS  | 7788 |
|  7900 | JAMES  | 7698 |
|  7902 | FORD   | 7566 |
|  7934 | MILLER | 7782 |
+-------+--------+------+
员工的领导编号=领导的员工编号
需要： a表的mgr=b表的empno
  select
    a.ename as '员工名',b.ename as '领导名'
  from
    emp a
  inner join
    emp b
  on
    a.mgr = b.empno;
+--------+--------+
| 员工名 | 领导名 |
+--------+--------+
| SMITH  | FORD   |
| ALLEN  | BLAKE  |
| WARD   | BLAKE  |
| JONES  | KING   |
| MARTIN | BLAKE  |
| BLAKE  | KING   |
| CLARK  | KING   |
| SCOTT  | JONES  |
| TURNER | BLAKE  |
| ADAMS  | SCOTT  |
| JAMES  | BLAKE  |
| FORD   | JONES  |
| MILLER | CLARK  |
+--------+--------+


七、外连接
1、什么是外连接？和内连接有什么区别？
  内连接：假设A和B表进行连接，使用内连接的话，凡是A和B能够匹配上的记录查询出来，这就是内连接，
内连接AB两表没有主副之分，两张表是平等的。
  外连接：假设A和B表进行连接，使用外连接的话，AB两张表中，有一张表是主表，一张副表，主要查询主表中的数据，捎带查询副表数据
如果副标中的数据没有和主表匹配上，副表会自动模拟出NULL与之匹配。
2、外连接分类：
  左外连接：
    左边的表是主表。任何一个左外连接都有右外连接的写法。两种可以互相转化
  右外连接：
    右边的表是主表。任何一个右外连接都有左外连接的写法

案例：找出每个员工的上级领导（所有员工都必须查出来，包括KING，内表中KING没有显示）
+-------+--------+------+
| empno | ename  | mgr  | 
+-------+--------+------+
|  7369 | SMITH  | 7902 |	
|  7499 | ALLEN  | 7698 |
|  7521 | WARD   | 7698 |
|  7566 | JONES  | 7839 |
|  7654 | MARTIN | 7698 |
|  7698 | BLAKE  | 7839 |
|  7782 | CLARK  | 7839 |
|  7788 | SCOTT  | 7566 |
|  7839 | KING   | NULL |
|  7844 | TURNER | 7698 |
|  7876 | ADAMS  | 7788 |
|  7900 | JAMES  | 7698 |
|  7902 | FORD   | 7566 |
|  7934 | MILLER | 7782 |
+-------+--------+------+
内连接的写法：
  select
    a.ename as '员工名',b.ename as '领导名'
  from
    emp a
  inner join
    emp b
  on
    a.mgr = b.empno;

外连接的写法：
  select
    a.ename as '员工名',b.ename as '领导名'
  from
    emp a
  left join     （把inner改成left，里面也有outer，但是也可以省略）  
    emp b
  on
    a.mgr = b.empno;
left表示左表占主导地位，即使匹配不上也要查出来，这样KING可以有领导编号NULL

+--------+--------+
| 员工名 | 领导名 |
+--------+--------+
| SMITH  | FORD   |
| ALLEN  | BLAKE  |
| WARD   | BLAKE  |
| JONES  | KING   |
| MARTIN | BLAKE  |
| BLAKE  | KING   |
| CLARK  | KING   |
| SCOTT  | JONES  |
| KING   | NULL   |
| TURNER | BLAKE  |
| ADAMS  | SCOTT  |
| JAMES  | BLAKE  |
| FORD   | JONES  |
| MILLER | CLARK  |
+--------+--------+

把这个命令改成右外连接：
  select
    a.ename as '员工名',b.ename as '领导名'
  from
    emp b         (把a改成b)
  right join     （把left改成right）  
    emp a         （把b改成a）
  on
    a.mgr = b.empno;


案例：找出哪个部门没有员工？
+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |    员工表
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |
|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
+--------+------------+----------+
| DEPTNO | DNAME      | LOC      |       部门表
+--------+------------+----------+
|     10 | ACCOUNTING | NEW YORK |
|     20 | RESEARCH   | DALLAS   |
|     30 | SALES      | CHICAGO  |
|     40 | OPERATIONS | BOSTON   |
+--------+------------+----------+
以部门表为主表，因为这样的话部门就会有NULL的部分
  select 
    d.*
  from
    emp e
  right join
    dept d
  on
    e.deptno = d.deptno
  where
    e.empno is null;

+--------+------------+--------+
| DEPTNO | DNAME      | LOC    |
+--------+------------+--------+
|     40 | OPERATIONS | BOSTON |
+--------+------------+--------+

八、三张表怎么连接查询？
案例：找出每一个员工的部门名称及工资等级
(一步一步进行拆解，一下写出来很难)
select empno,ename,sal,deptno from emp;
+-------+--------+---------+--------+
| empno | ename  | sal     | deptno |     EMP表  e表
+-------+--------+---------+--------+
|  7369 | SMITH  |  800.00 |     20 |
|  7499 | ALLEN  | 1600.00 |     30 |
|  7521 | WARD   | 1250.00 |     30 |
|  7566 | JONES  | 2975.00 |     20 |
|  7654 | MARTIN | 1250.00 |     30 |
|  7698 | BLAKE  | 2850.00 |     30 |
|  7782 | CLARK  | 2450.00 |     10 |
|  7788 | SCOTT  | 3000.00 |     20 |
|  7839 | KING   | 5000.00 |     10 |
|  7844 | TURNER | 1500.00 |     30 |
|  7876 | ADAMS  | 1100.00 |     20 |
|  7900 | JAMES  |  950.00 |     30 |
|  7902 | FORD   | 3000.00 |     20 |
|  7934 | MILLER | 1300.00 |     10 |
+-------+--------+---------+--------+
select * from dept;
+--------+------------+----------+
| DEPTNO | DNAME      | LOC      |     DEPT表 d表
+--------+------------+----------+
|     10 | ACCOUNTING | NEW YORK |
|     20 | RESEARCH   | DALLAS   |
|     30 | SALES      | CHICAGO  |
|     40 | OPERATIONS | BOSTON   |
+--------+------------+----------+
select * from salgrade;
+-------+-------+-------+
| GRADE | LOSAL | HISAL |    SALGRADE表 s表
+-------+-------+-------+
|     1 |   700 |  1200 |
|     2 |  1201 |  1400 |
|     3 |  1401 |  2000 |
|     4 |  2001 |  3000 |
|     5 |  3001 |  9999 |
+-------+-------+-------+

注意：解释一下：
   ...
     A
   join
     B
   join
     C
   on
     ...
  表示A表和B表先进行表连接，连接之后A表继续和C表进行连接。
  
  select
    e.ename,d.dname,s.grade，
  from
    emp e
  join
    dept d
  on
    e.deptno = d.deptno
  join
    salgrade s
  on
    e.sal between s.losal and s.hisal;
+--------+------------+-------+
| ename  | dname      | grade |
+--------+------------+-------+
| SMITH  | RESEARCH   |     1 |
| ALLEN  | SALES      |     3 |
| WARD   | SALES      |     2 |
| JONES  | RESEARCH   |     4 |
| MARTIN | SALES      |     2 |
| BLAKE  | SALES      |     4 |
| CLARK  | ACCOUNTING |     4 |
| SCOTT  | RESEARCH   |     4 |
| KING   | ACCOUNTING |     5 |
| TURNER | SALES      |     3 |
| ADAMS  | RESEARCH   |     1 |
| JAMES  | SALES      |     1 |
| FORD   | RESEARCH   |     4 |
| MILLER | ACCOUNTING |     2 |
+--------+------------+-------+

案例升级：找出每一个员工的部门名称、工资等级、以及上级领导。（领导KING必须用上外连接）
  select
    e.ename '员工',d.dname,s.grade,e1.ename '领导'
  from
    emp e
  join
    dept d
  on
    e.deptno = d.deptno
  join
    salgrade s
  on
    e.sal between s.losal and s.hisal
  left join                         //在原来的基础上添加外连接，以e为主表，所以是左外连接
    emp e1
  on
    e.mgr = e1.empno;
+--------+------------+-------+-------+
| 员工   | dname      | grade | 领导  |
+--------+------------+-------+-------+
| SMITH  | RESEARCH   |     1 | FORD  |
| ALLEN  | SALES      |     3 | BLAKE |
| WARD   | SALES      |     2 | BLAKE |
| JONES  | RESEARCH   |     4 | KING  |
| MARTIN | SALES      |     2 | BLAKE |
| BLAKE  | SALES      |     4 | KING  |
| CLARK  | ACCOUNTING |     4 | KING  |
| SCOTT  | RESEARCH   |     4 | JONES |
| KING   | ACCOUNTING |     5 | NULL  |
| TURNER | SALES      |     3 | BLAKE |
| ADAMS  | RESEARCH   |     1 | SCOTT |
| JAMES  | SALES      |     1 | BLAKE |
| FORD   | RESEARCH   |     4 | JONES |
| MILLER | ACCOUNTING |     2 | CLARK |
+--------+------------+-------+-------+




Navicat:连接名：10.96.29.175-MYSQL     主机名或IP地址：127.0.0.1（代表主机）或localhost    端口：3306  用户名：root   密码：so1esou1





									子查询
一、什么是子查询？子查询都可以出现在哪里？
  select语句中嵌套select语句，被嵌套的select语句是子查询
  可以出现在：
  select
    ..(select).
  from
    ..(select).
  where
    ..(select).

二、where子句中使用子查询
  案例：找出高于平均薪资的员工信息
  select * from emp where sal > avg(sal);  //错误写法，where后不能直接跟分组函数
第一步：找出平均薪资
  select avg(sal) from emp;
+-------------+
| avg(sal)    |
+-------------+
| 2073.214286 |
+-------------+
第二步：where过滤:
  select * from emp where sal > 2073.214286 ;
+-------+-------+-----------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+------+------------+---------+------+--------+
|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |
|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |
|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |
|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |
|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |
|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |
+-------+-------+-----------+------+------------+---------+------+--------+
第一步和第二步合并：
  select * from emp where sal > (select avg(sal) from emp);    //直接把第一步命令插到第二步命令后，再加上()。
+-------+-------+-----------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+------+------------+---------+------+--------+
|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |
|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |
|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |
|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |
|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |
|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |
+-------+-------+-----------+------+------------+---------+------+--------+

三、from后面嵌套子查询
  案例：找出每个部门平均薪水的薪资等级（难点）
第一步：找出每个部门的平均薪水（按照部门编号分组，求sal的平均值）
  select deptno,avg(sal) as avgsal from emp group by deptno;
+--------+-------------+
| deptno | avgsal      |
+--------+-------------+
|     10 | 2916.666667 |
|     20 | 2175.000000 |
|     30 | 1566.666667 |
+--------+-------------+
第二步：把上面查询出来的表当作临时的新表t，让t表和salgrade进行表连接，条件是t.avgsal between s.losal and s.hisal
  select 
    t.*,s.grade
  from
    (select deptno,avg(sal) as avgsal from emp group by deptno) t       顺便给上表赋别名，(select deptno,avg(sal) as avgsal from emp group by deptno)被看作是原表的名字
  join
    salgrade s
  on
    t.avgsal between s.losal and s.hisal;
+--------+-------------+-------+
| deptno | avgsal      | grade |
+--------+-------------+-------+
|     30 | 1566.666667 |     3 |
|     10 | 2916.666667 |     4 |
|     20 | 2175.000000 |     4 |
+--------+-------------+-------+

  案例：找出每个部门平均的薪资等级？
第一步：找出每个员工的薪水等级
  select e.ename,e.deptno,e.sal,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;
+--------+--------+---------+-------+
| ename  | deptno | sal     | grade |
+--------+--------+---------+-------+
| SMITH  |     20 |  800.00 |     1 |
| ALLEN  |     30 | 1600.00 |     3 |
| WARD   |     30 | 1250.00 |     2 |
| JONES  |     20 | 2975.00 |     4 |
| MARTIN |     30 | 1250.00 |     2 |
| BLAKE  |     30 | 2850.00 |     4 |
| CLARK  |     10 | 2450.00 |     4 |
| SCOTT  |     20 | 3000.00 |     4 |
| KING   |     10 | 5000.00 |     5 |
| TURNER |     30 | 1500.00 |     3 |
| ADAMS  |     20 | 1100.00 |     1 |
| JAMES  |     30 |  950.00 |     1 |
| FORD   |     20 | 3000.00 |     4 |
| MILLER |     10 | 1300.00 |     2 |
+--------+--------+---------+-------+
第二步：通过上表，按deptno分组，求grade的平均值
不需要看作临时表，继续往后分组就行了
  select 
    e.deptno,avg(s.grade)
  from 
    emp e 
  join 
    salgrade s 
  on 
    e.sal between s.losal and s.hisal
  group by
    e.deptno;
+--------+--------------+
| deptno | avg(s.grade) |
+--------+--------------+
|     10 |       3.6667 |
|     20 |       2.8000 |
|     30 |       2.5000 |
+--------+--------------+

四、在select后面嵌套子查询
  案例：找出每个员工所在的部门名称，要求显示员工名和部门名
之前的写法：
  select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno;
用嵌套更简便：
  select 
    e.ename,
    (select d.dname from dept d where e.deptno = d.deptno) as dname
  from 
    emp e;
+--------+------------+
| ename  | dname      |
+--------+------------+
| SMITH  | RESEARCH   |
| ALLEN  | SALES      |
| WARD   | SALES      |
| JONES  | RESEARCH   |
| MARTIN | SALES      |
| BLAKE  | SALES      |
| CLARK  | ACCOUNTING |
| SCOTT  | RESEARCH   |
| KING   | ACCOUNTING |
| TURNER | SALES      |
| ADAMS  | RESEARCH   |
| JAMES  | SALES      |
| FORD   | RESEARCH   |
| MILLER | ACCOUNTING |
+--------+------------+




								union
union：可以将查询结果集相加
  案例：找出工作岗位是SALESMAN和MANAGER的员工
  多种写法：
  select ename,job from emp where job = 'SALESMAN' or job = 'MANAGER';
  select ename,job from emp where job in('MANAGER','SALESMAN');
  union写法：
    select ename,job from emp where job = 'SALESMAN'
    union
    select ename,job from emp where job = 'MANAGER';
+--------+----------+
| ename  | job      |
+--------+----------+
| ALLEN  | SALESMAN |
| WARD   | SALESMAN |
| MARTIN | SALESMAN |
| TURNER | SALESMAN |
| JONES  | MANAGER  |
| BLAKE  | MANAGER  |
| CLARK  | MANAGER  |
+--------+----------+
or和in无法解决两张不相干的数据的拼接工作，而union可以
  select ename from emp
  union
  select dname from dept;
+------------+
| ename      |   
+------------+
| SMITH      |
| ALLEN      |
| WARD       |
| JONES      |
| MARTIN     |
| BLAKE      |
| CLARK      |
| SCOTT      |
| KING       |
| TURNER     |
| ADAMS      |
| JAMES      |
| FORD       |
| MILLER     |
| ACCOUNTING |
| RESEARCH   |
| SALES      |
| OPERATIONS |
+------------+

union使用要求组合的数据列数要一样，否则报错



								limit
重点，以后分页查询全靠它
limit是mysql特有的，其他数据库没有，不通用。（Oracle中有一个相同的机制叫做rownum）
一、limit作用：取结果集中的部分数据
二、语法机制：
  limit startIndex,length
  startIndex表示起始位置,默认从0开始
  length表示取几个

  案例：取出工资前5名的员工
  思路：降序取前5个
  select ename,sal from emp order by sal desc;
+--------+---------+
| ename  | sal     |
+--------+---------+
| KING   | 5000.00 |
| SCOTT  | 3000.00 |
| FORD   | 3000.00 |
| JONES  | 2975.00 |
| BLAKE  | 2850.00 |
| CLARK  | 2450.00 |
| ALLEN  | 1600.00 |
| TURNER | 1500.00 |
| MILLER | 1300.00 |
| MARTIN | 1250.00 |
| WARD   | 1250.00 |
| ADAMS  | 1100.00 |
| JAMES  |  950.00 |
| SMITH  |  800.00 |
+--------+---------+
  select ename,sal from emp order by sal desc limit 0,5;
  select ename,sal from emp order by sal desc limit 5;  //不写0，也是默认从0开始
+-------+---------+
| ename | sal     |
+-------+---------+
| KING  | 5000.00 |
| SCOTT | 3000.00 |
| FORD  | 3000.00 |
| JONES | 2975.00 |
| BLAKE | 2850.00 |
+-------+---------+

三、limit是sql语句最后执行的一个环节
  select	5	
    ...
  from		1
    ...
  where		2
    ...
  group by	3
    ...
  having	4
    ...
  order by	6
    ...
  limit		7
    ...

  案例：找出工资排名在第4到第9名的员工
  select ename,sal from emp order by sal desc limit 3,6;   //注意limit里数字
+--------+---------+
| ename  | sal     |
+--------+---------+
| JONES  | 2975.00 |
| BLAKE  | 2850.00 |
| CLARK  | 2450.00 |
| ALLEN  | 1600.00 |
| TURNER | 1500.00 |
| MILLER | 1300.00 |
+--------+---------+


四、通用的标准分页sql？
每页显示3条记录：
第1页:0,3
第2页:3,3
第3页:6,3
第4页:9,3
第5页:12,3

每页显示pageSize条记录：
第pageNo页:(pageNo - 1) * pageSize,pageSize
java代码{
  int pageNo = 2;   //页码是2   比如在百度页码点击11，就是传进去一个11的页码，就能找到页面
  int pageSize = 10;  //每页显示10条
  limit 10,10
}
