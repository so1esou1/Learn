package com.bjpowernode.javase.array;



/*
  1、java语言中的数组是一种引用数据类型，不属于基本数据类型。数组父类是Object类。
  2、数组实际上是一个容器，可以同时容纳多个元素（购物袋，是一个数据的集合）
  数组字面意思：一组数据
  3、数组当中可以存储基本数据类型的数据，也可以存储引用数据类型的数据。
  4、数组因为是引用类型，数组对象存储在堆内存当中
  5、数组中如果存储java对象的话，实际上存储的是对象的“引用（内存地址）”,不能直接存储java对象
  6、数组一旦创建，在java中规定，长度不可变
  7、数组分类：一维数组（较多）、二维数组（偶尔）、三维、多维数组
  8、所有的数组对象都有Length属性，用来获取数组中元素的个数
  9、java中的数组要求元素中类型统一，每一个元素占用空间大小一样。int类型数组只能存储int类型，Person类型数组只能存储Person类型
  10、数组在内存方面存储的时候，数组的内存地址是连续的（存储的每个元素都是有规则地，挨着排列的），是数组存储
元素的特点，数组实际上是一种简单的数据结构
  11、所有的数组都是拿“第一个小方框的内存地址”作为整个数组对象的内存地址。（数组中首元素的内存地址作为整个数组对象的内存地址
因为内存地址是连续的，知道第一个可以算出后续元素）
  12、数组每个元素都有下标，下标从0开始，以1递增。最后一个元素的下标是：Length - 1
下标非常重要，因为我们对数组元素进行“存取”的时候，都需要通过下标来进行.
  13、数组的优点：查询/检索/查找某个下标上的元素时，查询效率最高，通过数学表达式就可以计算出某个下标上元素的内存地址
数组中存储100个元素，或存储100万个元素，在元素查询检索方面，效率时相同的，不会一个一个找，而是通过计算出来的
  缺点：（1）由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候效率较低，因为会涉及到后面
元素统一向前或向后位移的操作     （2）数组不能存储大数据量，因为很难在内存空间上找到一块特别大的连续的内存空间
注意：数组中最后一个元素的增删是没有效率影响的。
  14、怎么声明/定义一个一维数组？语法格式：
        int[] array1;
        double[] array2;
        booleanm[] array3;
        String[] array4;
        Object[] array5;
  15、怎么初始化一个一维数组？
    两种方式：静态初始化一堆一维数组和动态初始化一堆一维数组。
        静态初始化语法格式：
            int[] array = {100,200,300,55};
        动态初始化语法格式：
            int[] array = new int[5];//这里的5表示数组的元素个数。初始化一个5个长度的int类型数组，每个元素默认值为0
            String[] names = new String[6]; //初始化6个长度的String类型数组，每个元素默认值为null。
 */
public class ArrayTest01 {
    public static void main(String[] args) {
        //使用静态初始化的方式声明一个int类型的数组
        int[] a = {1,100,10,20,55,689};  //java也允许写成int a[]（C++的写法风格，不建议java中使用）

        //数组中每一个数组对象都有Length属性
        System.out.println("数组中元素的个数" + a.length);
        //数组中每个元素都有下标，可以通过下标存取元素
        //取（读取）
        System.out.println("第一个元素 = " + a[0]);
        System.out.println("最后一个元素 = " + a[a.length - 1]);
        //存（修改）
        //把第一个元素修改为111
        a[0] = 111;
        //把最后一个元素修改为0
        a[a.length - 1] = 0;

        System.out.println("第一个元素 = " + a[0]);
        System.out.println("最后一个元素 = " + a[a.length - 1]);

        //一维数组怎么遍历呢？
        for (int i = 0;i < a.length;i++){
            System.out.println(a[i]);//i是从0到5，是下标
        }

        //下标为6表示第7个元素，下标越界会出现什么异常？
        //System.out.println(a[6]);
        // 比较著名的异常，数组下标越界异常ArrayIndexOutOfBoundsException

        //从最后一个元素遍历到第一个元素
        for (int i = a.length - 1;i >= 0;i--){
            System.out.println("颠倒顺序输出-->" + a[i]);
        }
    }
}
/*什么时候采用静态初始化方式，什么时候使用动态初始化方式？
    当创建数组时，确定数组中存储哪些具体的元素时，采用静态初始化的方式
    当创建数组时，不确定将来数组中存储哪些数据，可以采用动态初始化的方式，预先分配内存空间*/